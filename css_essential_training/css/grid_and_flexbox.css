/* Flexbox
   ¨¨¨¨¨¨¨
   Items are aligned on a single axis, it's one dimension => column or lines

   Grid
   ¨¨¨¨
   Two-dimensional, can arrange items into rows and columns at the same time
*/

/* Flexbox
   
   Terminology:
   ¨¨¨¨¨¨¨¨¨¨¨¨
   flex-container: refers to the parent element
   flex-items: refers to the child elements, are laid out along the main axis, arranged in rows by default
   flex-direction: determines the direction of the main axis. There are 4 values: row, row-reverse, column and column reverse
   flex-wrap: determines how flex-items wrap => nowrap: flex-items don't wrap ; wrap: flex-items that not fit wrap to the next line

   shorthand for flex-direction and flex-wrap => flex-flow: column wrap;
   longhand for flex-direction and flex-wrap => flex-direction: column;
                                                flex-wrap: wrap;

   Flex properties:
   ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
   flex-basis: initial size of flex-items
   flex-grow: how items expand if there is an extra space in the container
   flex-shrink: how items shrink if there isn't enough space in the container
   You can use shorthand => flex: grow shrink basis;

   Align items in a flex container:
   ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
   justify-cotent: align items on the main axis
   align-items: align items on the cross axis
*/
.flex-container {
	border: 3px solid black;
	padding: 5px;
	display: flex;
}
.inline-flex-container {
	border: 3px solid black;
	padding: 5px;
	display: inline-flex; /* Flex container displaying inline */	
}
.flex-item {
	border: 1px solid black;
	background: lightblue;
}

/* Grid
   
   Terminology:
   ¨¨¨¨¨¨¨¨¨¨¨¨
   grid-container: the parent element
   grid-items: the child elements within the grid container
   fr: represents a fraction of the available space in the grid container
   grid-auto-rows: set rows of implicit grid
   grid-auto-columns: set columns of implicit grid

   Grid lines and tracks:
   ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
   To define a specific number of gridlines and tracks use grid-template-columns and grid-template-rows, this will create an explicit grid
   
   Grid properties:
   ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
   grid-column: grid-column-start and grid-colmun-end
   grid-row: grid-row-start and grid-row-end
*/
.grid-container {
	border: 3px solid black;
	padding: 5px;
	display: grid;
}
.inline-grid-container {
	border: 3px solid black;
	padding: 5px;
	display: inline-grid; /* Grid container displaying inline */	
}
.grid-item {
	border: 1px solid black;
	background: lightblue;
}
.explicit-grid-container {
	grid-template-columns: 100px 100px 100px;
	grid-template-rows: 100px 100px; 
}
.fraction-explicit-grid-container {
	grid-template-columns: 1fr 1fr 1fr; /* Can be "repeat(3, 1fr);" */
}
.dif-fraction-explicit-grid-container {
	grid-template-columns: 1fr 2fr 1fr;
}
.gap-fraction-explicit-grid-container {
	grid-template-columns: 1fr 1fr 1fr;
	grid-gap: 10px 20px; /* rows | columns */
}
.implicit-grid-container {
	grid-template-columns: 1fr 1fr 1fr;
	grid-template-rows: 1fr 1fr;
	grid-auto-columns: repeat(3, 1fr);
	grid-auto-rows: repeat(2, 1fr);
}